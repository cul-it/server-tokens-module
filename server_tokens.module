<?php
/**
 * Implements hook_token_info().
 *
 * @ingroup server_tokens
 */
function server_tokens_token_info() {
  $info = array();

  $info['types']['server'] = array(
    'name' => t('Server vars'),
    'description' => t('Tokens from _SERVER.'),
  );

  $info['tokens']['server']['HTTP_REFERER'] = array(
    'name' => t('HTTP_REFERER'),
    'description' => t("Var from _SERVER"),
  );

  $info['tokens']['server']['HTTP_USER_AGENT'] = array(
    'name' => t('HTTP_USER_AGENT'),
    'description' => t("Var from _SERVER"),
  );

  $info['tokens']['server']['context'] = array(
    'name' => t('Feedback Context'),
    'description' => t("URL based on destination"),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @ingroup server_tokens
 */
function server_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  $newcatalog = "https://newcatalog-int.library.cornell.edu/";

  // Text format tokens.
  if ($type == 'server') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'HTTP_REFERER':
          $replacements[$original] = $_SERVER['HTTP_REFERER'];
          if ($sanitize) {
            $replacements[$original] = filter_xss($replacements[$original]);
          }
          break;

        case 'HTTP_USER_AGENT':
          $replacements[$original] = $_SERVER['HTTP_USER_AGENT'];
          if ($sanitize) {
            $replacements[$original] = filter_xss($replacements[$original]);
          }
          break;

        case 'context':
          $context = '';
          parse_str($_SERVER['QUERY_STRING'],$fields);
          if (!empty($fields['destination'])) {
            $destination = $fields['destination'];
            $prefix = 'catalog/';
            if (strpos($destination, $prefix) === 0) {
              $context = $newcatalog . substr($destination, strlen($prefix));
            }
          }
          else {
            $url = $_SERVER['HTTP_HOST'] . request_uri();
            $destination_catalog = '?destination=catalog/';
            if (($pos = strpos($url, $destination_catalog)) !== FALSE) {
                $path = substr($url, $pos + strlen($destination_catalog));
                $context = $newcatalog . $path;
            }
          }
          if (empty($context)) {
            $dest = drupal_get_destination();
            $path = $dest['destination'];
            $context = url($path, array('absolute' => TRUE));
          }
          else {
            $context = check_url($context);
          }
          $replacements[$original] = $context;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_form_alter.
 *
 */
function server_tokens_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_221') {
    //dpm($form_state, 'submitted');
    dpm($form['submitted'], 'form-submitted');
  }
}
