<?php

define("NEWCATALOG", 'https://newcatalog-int.library.cornell.edu/');
define("CATALOGQUERY", 'catalogq');
define("CULDESTINATION", 'catalogdestination');

/**
 * Implements hook_token_info().
 *
 * @ingroup server_tokens
 */
function server_tokens_token_info() {
  $info = array();

  $info['types']['server'] = array(
    'name' => t('Server vars'),
    'description' => t('Tokens from _SERVER.'),
  );

  $info['tokens']['server']['HTTP_REFERER'] = array(
    'name' => t('HTTP_REFERER'),
    'description' => t("Var from _SERVER"),
  );

  $info['tokens']['server']['HTTP_USER_AGENT'] = array(
    'name' => t('HTTP_USER_AGENT'),
    'description' => t("Var from _SERVER"),
  );

  $info['tokens']['server']['context'] = array(
    'name' => t('Feedback Context'),
    'description' => t("URL based on destination"),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 *
 * @ingroup server_tokens
 */
function server_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Text format tokens.
  if ($type == 'server') {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'HTTP_REFERER':
          $replacements[$original] = $_SERVER['HTTP_REFERER'];
          if ($sanitize) {
            $replacements[$original] = filter_xss($replacements[$original]);
          }
          break;

        case 'HTTP_USER_AGENT':
          $replacements[$original] = $_SERVER['HTTP_USER_AGENT'];
          if ($sanitize) {
            $replacements[$original] = filter_xss($replacements[$original]);
          }
          break;

        case 'context':
          $context = '';
          parse_str($_SERVER['QUERY_STRING'],$fields);
          if (!empty($fields[CULDESTINATION])) {
            $destination = $fields[CULDESTINATION];
            $prefix = 'catalog/';
            if (strpos($destination, $prefix) === 0) {
              $context = NEWCATALOG . substr($destination, strlen($prefix));
              // Drupal will gobble up the q= parameter, so temporarily change it's name
              $context = server_tokens_rename_query_parameter($context, 'q', CATALOGQUERY);
            }
          }
          if (empty($context)) {
            $dest = drupal_get_destination();
            $path = $dest['destination'];
            $context = url($path, array('absolute' => TRUE));
          }
          $replacements[$original] = $context;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_drupal_goto_alter
 *
 */
function server_tokens_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  if (strpos($path, NEWCATALOG) === 0) {
    $path = server_tokens_rename_query_parameter($path, CATALOGQUERY, 'q');
  }
}

/**
 * changes the name of one query parameter to a different name
 * @param  string $url     URL with query string
 * @param  string $oldname name of query parameter to change
 * @param  string $newname new name for parameter
 * @return string          URL with parameter name replaced
 */
function server_tokens_rename_query_parameter($url, $oldname, $newname) {
  $url_out = $url;
  $pieces = parse_url($url);
  if (!empty($pieces['query'])) {
    parse_str($pieces['query'], $query);
    if (!empty($query["$oldname"])) {
      $query["$newname"] = $query["$oldname"];
      unset($query["$oldname"]);
      $pieces['query'] = http_build_query($query);
      $url_out = server_tokens_unparse_url($pieces);
    }
  }
  return $url_out;
}

function server_tokens_unparse_url($parsed_url) {
  // from http://php.net/manual/en/function.parse-url.php#106731
  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : '';
  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : '';
  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : '';
  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : '';
  $pass     = ($user || $pass) ? "$pass@" : '';
  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : '';
  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : '';
  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : '';
  return "$scheme$user$pass$host$port$path$query$fragment";
}

/**
 * Implements hook_form_alter.
 *
 */
function server_tokens_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_client_form_221') {
    unset($_REQUEST['destination']);
    $form_state['redirect'] = $form['submitted']['context']['#value'];
  }
}
